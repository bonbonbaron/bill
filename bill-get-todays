#!/bin/bash

function getVal {
  grep $1 $2 | awk '{print $2}' | tr -d '",'
}

function getVals {
  IFS='
  '
  echo "$(getVal $1 $2)"
}

# Force bill directory to exist.
REPO=$(readlink -f $(dirname $0))
# Today's date in URL-acceptable format
#DATE=$(date +%Y-%m-%d)
DATE=2023-06-01 # to debug, pick date in the past.
PKG_URL_DIR=$REPO/.pkgs/
DB=$REPO/.db
# Key
if [ ! -e $REPO/.env ]; then
  echo -e "You need to put a .env file into $SRC_DIR first. Populate that file like so:\n\nCONGRESS_KEY=<your API key>\n"
  exit 1
fi

if [ ! -d $PKG_URL_DIR ]; then
  mkdir -p $PKG_URL_DIR
fi

source $REPO/show_wait
source $REPO/extract-amts
source $REPO/.env
KEY="api_key=$CONGRESS_KEY"

BE_QUIET=-s
TMP=$REPO/.tmp

rm -f $TMP
touch $TMP

function procBillPkg() {
  echo "${@}" | jq '.' >> $TMP
  CONGRESS=$(jq  '.congress'  $TMP| tr -d '"')
  _type=$(jq '.billType'  $TMP | tr -d '"')
  _billNumber=$(jq '.billNumber'  $TMP | tr -d '"')
  name=$CONGRESS$_type$_billNumber  # CONGRESS number isn't technically part of "bill slug", but it'll keep it unique across congresses.
  mkdir -p $REPO/db/$CONGRESS/$name/.pkg
  mv $TMP $PKG_URL_DIR/url-pkg-$counter
  ((counter += 1))
}


# Store the first page of results in database.
counter=0

# Get this congress's first page of 100 bill summaries. (Time format in URL is yyyy-mm-dd'T'HH:mm:ss'Z'.)
todays_bill_activity=$(curl $BE_QUIET -X 'GET' "https://api.govinfo.gov/collections/BILLS/${DATE}T00%3A00%3A00Z?pageSize=100&offsetMark=*&congress=$1&$KEY")
procBillPkg $todays_bill_activity


# If there are anymore pages beyond the first, retrieve and store them in the databse as well.
#show_wait "Retrieving today's bill activity..." 2>/dev/null &
wpid=$!

nextPage=$(echo "$todays_bill_activity" | jq '.nextPage' | sed 's/"//g')
while [ ! ${nextPage} = null ]; do
  #echo "nextPage = ${nextPage}"
  todays_bill_activity=$(curl $BE_QUIET -X 'GET' "${nextPage}&$KEY")
  procBillPkg $todays_bill_activity
  nextPage=$(echo $todays_bill_activity | jq '.nextPage' | sed 's/"//g')
done

#kill -KILL $wpid 
rm -f $TMP

# For all bill activities today...
for f in $(ls $PKG_URL_DIR); do
  # Make an array of IDs
  pkgIds=($(getVals packageId "${PKG_URL_DIR}/$f"))
  # Make a corresponding array of URLs
  pkgUrls=($(getVals packageLink "${PKG_URL_DIR}/$f"))
  # Make sure we have the same number of package URLs as we do package IDs. They need to correspond perfectly.
  if [ ${#pkgIds[*]} -ne ${#pkgUrls[*]} ]; then
    echo "There's supposed to be the same number of package IDs as package URLs in $f. Is it corrupted? Exitting..."
    exit
  fi
  # For each ID-URL mapping in the current batch...
  counter=0
  maxCounter=${#pkgIds[*]}
  while [ $counter -lt $maxCounter ]; do
    id=${pkgIds[$counter]}
    pkgUrl=${pkgUrls[$counter]}
    #show_wait "Processing bill $id..." 2>/dev/null &
    wpid=$!
    # I append the counter to the package ID *just in case* there's multiple activity on the same document.
    # Don't re-download pre-existing text docs.
    formattedCounter=$(printf '%03d' $counter)
    # Only curl the package if we haven't done so for this one yet.
    curl $BE_QUIET "${pkgUrl}?$KEY" > $TMP
    _billNumber=$(jq '.billNumber' $TMP | tr -d '"')
    _type=$(jq '.billType' $TMP | tr -d '"')
    CONGRESS=$(jq  '.congress' $TMP | tr -d '"')
    name=$CONGRESS$_type$_billNumber  # CONGRESS number isn't technically part of "bill slug", but it'll keep it unique across congresses.
    pkgPath="$REPO/db/$CONGRESS/$name/.pkg"
    mkdir -p $pkgPath
    pkgDoc=$pkgPath/pkg-$name
    mv $TMP $pkgDoc
    txtUrl=$(getVal txtLink $pkgDoc)
    txtDoc=$(readlink -f $pkgPath/../$name)
    curl $BE_QUIET $txtUrl?$KEY > "$txtDoc"
    #echo $txtDoc
    if [ $? -eq 0 -a -e $txtDoc ]; then
      # First, extract all the information you need about this bill.
      # name TEXT <-- grep out the collecion code, its trailing hyphen, congress, and the billVersion

      _type=$(jq '.billType' $pkgDoc | tr -d '"')
      _version=$(jq '.billVersion' $pkgDoc | tr -d '"')
      _collectionCode=$(jq '.collectionCode' $pkgDoc | tr -d '"')
      _billNumber=$(jq '.billNumber' $pkgDoc | tr -d '"')
      desc=$(jq '.shortTitle[0].title' $pkgDoc | tr -d '"')
      if [ "$desc" = "null" ]; then
        desc=$(jq '.title' $pkgDoc | tr -d '"')
      fi
      nUpdates=0 #TODO
      nPages=$(jq '.pages' $pkgDoc | tr -d '"')
      stage=$(jq '.billVersion' $pkgDoc | tr -d '"')
      createdTm=$(jq '.dateIssued' $pkgDoc | date +%s | tr -d '"')
      #lastUpdatedTm=$(jq '.lastModified' $pkgDoc | date +%s | tr -d '"')  not accurate in the database sense
      lastUpdatedTm=$(date +%s)
      CONGRESS=$(jq  '.congress' $pkgDoc | tr -d '"')
      name=$CONGRESS$_type$_billNumber  # CONGRESS number isn't technically part of "bill slug", but it'll keep it unique across congresses.
      filepath="$REPO/db/$CONGRESS/$name"

      if [ ! -d $filepath ]; then
        echo "creating filepath $filepath"
        mkdir -p $filepath
        if [ $? -ne 0 ]; then
          echo "error making directory $filepath. Exitting..."
          exit 1
        fi
      fi

      # Bill table insertion
      printf "%s\n" "$name - $desc"
      execStr="
      sqlite3 '$DB' 'INSERT INTO bill (
        name,
        desc,
        nUpdates,
        nPages,
        stageId,
        filepath,
        createdTm,
        lastUpdatedTm)
      VALUES (
        \"$name\",
        \"$desc\",
        $nUpdates,
        $nPages,
        (select id from stage where lower(symbol) = lower(\"$stage\")),
        \"$txtDoc\",
        $createdTm,
        $lastUpdatedTm
      );'"
      #echo $execStr  # good for debugging
      eval $execStr 2>/dev/null

      # Contributor table insertion
      nMembers=$(jq '.members | length' $pkgDoc)
      i=0
      while [ $i -lt $nMembers ]; do
        bgid=$(jq ".members[$i].bioGuideId" $pkgDoc | tr -d '"')
        role=$(jq ".members[$i].role" $pkgDoc | tr -d '"')
        execStr="
        sqlite3 '$DB' 'INSERT INTO contributor (
          billId,
          roleId,
          congressmanId)
        VALUES (
          (select id from bill where lower(name) = lower(\"$name\")),
          (select id from congressman where lower(bioguide) = lower(\"$bgid\")),
          (select id from contributorRole where lower(desc) = lower(\"$role\")))';"
        
        eval $execStr #2>/dev/null
        ((++i))
      done

      # Amount table insertion
      extractAmt $txtDoc
    fi
    ((counter++))
    #kill -KILL $wpid 
  done
done
#kill -KILL $wpid 
