#!/bin/bash

# Basic vars
REPO=$(readlink -f $(dirname $0)) # Force bill directory to exist.
if [ ! -e $REPO/.env ]; then
  echo -e "You need to put a .env file into $REPO first. Populate that file like so:\n\nCONGRESS_KEY=<your API key>\n"
  exit 1
fi
PKG_URL_DIR=$REPO/.pkgs/
if [ ! -d $PKG_URL_DIR ]; then
  mkdir -p $PKG_URL_DIR
fi
rm -f $PKG_URL_DIR/*
DB=$REPO/.db
PRVDATETIME_FILE=$REPO/.last-datetime
BE_QUIET=
counter=0

# Source the functions we use
source $REPO/scripts/extract-amts
source $REPO/scripts/extract-bill
source $REPO/scripts/extract-contributors
source $REPO/scripts/extract-text
source $REPO/.env
KEY="api_key=$CONGRESS_KEY"

# Options
while getopts 'rs' opt; do
  case $opt in
    r) # Empty out all the dynamic tables.
      sqlite3 $DB 'delete from bill; delete from amt; delete from contributor;'
      rm -rf $REPO/db/
      ;;
    s) # Silence curl.
      BE_QUIET=-s;;
  esac
done

# Timestamp range of bills to collect
NEWDATETIME=$(date -u +%Y-%m-%dT%H%%3A%M%%3A%SZ)
PRVDATETIME=
if [ -e $PRVDATETIME_FILE ]; then
  PRVDATETIME=$(cat $PRVDATETIME_FILE)
else
  PRVDATETIME=$(date -u +%Y-%m-%dT00%%3A00%%3A00Z)
  echo $PRVDATETIME > $PRVDATETIME_FILE
fi

# For debugging
#PRVDATETIME="2023-06-09T03%3A00%3A00Z"
#NEWDATETIME="2023-06-09T05%3A00%3A59Z"

# Local functions
function procBillPkg() {
  counter=$(ls $PKG_URL_DIR | wc -l)
  echo "${@}" | jq '.' > $PKG_URL_DIR/url-pkg-$counter
}

# Collect bills' summaries
# Get this congress's first page of 100 bill summaries. (Time format in URL is yyyy-mm-dd'T'HH:mm:ss'Z'.)
echo -e "\nRunning from $PRVDATETIME to $NEWDATETIME\n" | sed 's/%3A/:/g; s/[TZ]/ /g'
todays_bill_activity=$(curl $BE_QUIET -X 'GET' "https://api.congress.gov/v3/bill/?fromDateTime=$PRVDATETIME&toDateTime=$NEWDATETIME&limit=250&offsetMark=0&congress=118&$KEY")
procBillPkg $todays_bill_activity
# If there are anymore pages beyond the first, retrieve and store them in the databse as well.
nextPage=$(echo "$todays_bill_activity" | jq '.nextPage' | sed 's/"//g')
while [ ! ${nextPage} = null ]; do
  #echo "nextPage = ${nextPage}"
  todays_bill_activity=$(curl $BE_QUIET -X 'GET' "${nextPage}&$KEY")
  procBillPkg $todays_bill_activity
  nextPage=$(echo $todays_bill_activity | jq '.nextPage' | sed 's/"//g')
done

# For all batches of bills...
for f in $(ls $PKG_URL_DIR); do
  billSummaryFp="$PKG_URL_DIR/$f"
  billIdx=0
  nBills=$(jq '.pagination.count' $billSummaryFp | tr -d '"')
  # For each bill in the current batch...
  while [ $billIdx -lt $nBills ]; do
    # Bill (from bill endpoint)
    bill=$(jq ".bills[$billIdx]" $billSummaryFp)
    congress=$(echo $bill | jq  '.congress' | tr -d '"')
    chamber=$(echo $bill | jq  '.type' | tr -d '"')
    billNumber=$(echo $bill | jq '.number' | tr -d '"')
    billId="$congress$chamber$billNumber" 
    title=$(echo $bill | jq ".title" | tr -d '"')
    latestAction=$(echo $bill | jq '.latestAction.text' | tr -d '"')
    latestActionDt=$(date -d $(echo $bill | jq '.latestAction.actionDate' | tr -d '"') +%s)
    nActions=$(echo $bill | jq '.actions.count' | tr -d '"')
    updateTimestamp=$(echo $bill | jq '.updateDateIncludingText' | tr -d '"')
    updateSecondsSinceEpoch=$(date -d $(echo $bill | jq '.updateDateIncludingText' | tr -d '"') +%s)
    # Details (from details endpoint)
    details=$(curl $BE_QUIET -X 'GET' "$(echo $bill | jq '.url' | tr -d '"')&$KEY")
    sponsors=$(echo $details | jq '.bill.sponsors' 2>/dev/null)
    cosponsors=$(curl $BE_QUIET "$(echo $details | jq '.bill.cosponsors.url' | tr -d '"')&$KEY")
    # Text (from text endpoint)
    textUrl=
    textFp=
    availableTexts=$(curl $BE_QUIET -X 'GET' "https://api.congress.gov/v3/bill/$congress/$chamber/$billNumber/text?&$KEY")
    nAvailableTexts=$(echo $availableTexts | jq '.pagination.count' | tr -d '"')
    # Extract relevant data into database and files
    extract-text
    extract-bill
    extract-contributors
    extract-amts 
    # Copy file to web repository.
    if [ ! -z "$textFp" ]; then 
      sudo mkdir -p /var/www/bucksnbills.com/congress/$congress/bills/
      sudo cp $textFp /var/www/bucksnbills.com/congress/$congress/bills/$(basename $textFp)
    fi
    # Increment the index baybay
    ((++billIdx))
  done
done

# Waiting till now to store the new time for the next run allows debugging broken reruns.
echo $NEWDATETIME > $PRVDATETIME_FILE
echo -e "Done.\n"
